{"version":3,"sources":["vendor/ember-cli/app-prefix.js","telegram-client/adapters/application.js","telegram-client/app.js","telegram-client/controllers/home/login.js","telegram-client/controllers/home/reset.js","telegram-client/controllers/home/signup.js","telegram-client/initializers/app-version.js","telegram-client/initializers/export-application-global.js","telegram-client/models/post.js","telegram-client/models/user.js","telegram-client/router.js","telegram-client/routes/home.js","telegram-client/routes/home/login.js","telegram-client/routes/home/reset.js","telegram-client/routes/home/signup.js","telegram-client/routes/posts.js","telegram-client/routes/profile.js","telegram-client/routes/profile/followers.js","telegram-client/routes/profile/following.js","telegram-client/routes/profile/posts.js","telegram-client/serializers/user.js","telegram-client/templates/application.js","telegram-client/templates/home.js","telegram-client/templates/home/login.js","telegram-client/templates/home/reset.js","telegram-client/templates/home/signup.js","telegram-client/templates/home/success.js","telegram-client/templates/posts.js","telegram-client/templates/profile.js","telegram-client/templates/profile/followers.js","telegram-client/templates/profile/following.js","telegram-client/templates/profile/posts.js","telegram-client/templates/todos/login.js","telegram-client/tests/adapters/application.jshint.js","telegram-client/tests/app.jshint.js","telegram-client/tests/controllers/home/login.jshint.js","telegram-client/tests/controllers/home/reset.jshint.js","telegram-client/tests/controllers/home/signup.jshint.js","telegram-client/tests/helpers/resolver.js","telegram-client/tests/helpers/resolver.jshint.js","telegram-client/tests/helpers/start-app.js","telegram-client/tests/helpers/start-app.jshint.js","telegram-client/tests/models/post.jshint.js","telegram-client/tests/models/user.jshint.js","telegram-client/tests/router.jshint.js","telegram-client/tests/routes/home.jshint.js","telegram-client/tests/routes/home/login.jshint.js","telegram-client/tests/routes/home/reset.jshint.js","telegram-client/tests/routes/home/signup.jshint.js","telegram-client/tests/routes/posts.jshint.js","telegram-client/tests/routes/profile.jshint.js","telegram-client/tests/routes/profile/followers.jshint.js","telegram-client/tests/routes/profile/following.jshint.js","telegram-client/tests/routes/profile/posts.jshint.js","telegram-client/tests/serializers/user.jshint.js","telegram-client/tests/test-helper.js","telegram-client/tests/test-helper.jshint.js","telegram-client/tests/unit/adapters/application-test.js","telegram-client/tests/unit/adapters/application-test.jshint.js","telegram-client/tests/unit/controllers/home/login-test.js","telegram-client/tests/unit/controllers/home/login-test.jshint.js","telegram-client/tests/unit/controllers/home/reset-test.js","telegram-client/tests/unit/controllers/home/reset-test.jshint.js","telegram-client/tests/unit/controllers/home/signup-test.js","telegram-client/tests/unit/controllers/home/signup-test.jshint.js","telegram-client/tests/unit/models/post-test.js","telegram-client/tests/unit/models/post-test.jshint.js","telegram-client/tests/unit/models/user-test.js","telegram-client/tests/unit/models/user-test.jshint.js","telegram-client/tests/unit/routes/home/index-test.js","telegram-client/tests/unit/routes/home/index-test.jshint.js","telegram-client/tests/unit/routes/home/login-test.js","telegram-client/tests/unit/routes/home/login-test.jshint.js","telegram-client/tests/unit/routes/profile/index-test.js","telegram-client/tests/unit/routes/profile/index-test.jshint.js","telegram-client/tests/unit/routes/profile/posts-test.js","telegram-client/tests/unit/routes/profile/posts-test.jshint.js","telegram-client/tests/unit/serializers/user-test.js","telegram-client/tests/unit/serializers/user-test.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('telegram-client/adapters/application', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].RESTAdapter.extend({\n    namespace: \"api\"\n  });\n\n});","define('telegram-client/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'telegram-client/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('telegram-client/controllers/home/login', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\tvar HomeLoginController = Ember['default'].ObjectController.extend({\n\t\tactions: {\n\t\t\tlogin: function login() {\n\t\t\t\tvar username = this.get(\"username\");\n\t\t\t\tvar password = this.get(\"password\");\n\t\t\t\tvar name = this.get(\"name\");\n\t\t\t\tvar controller = this;\n\t\t\t\tvar newUser = this.store.createRecord(\"user\", {\n\t\t\t\t\tid: username,\n\t\t\t\t\tpassword: password,\n\t\t\t\t\tname: name,\n\t\t\t\t\toperation: \"login\"\n\t\t\t\t});\n\t\t\t\tnewUser.save().then(function () {\n\t\t\t\t\tcontroller.transitionToRoute(\"posts\");\n\t\t\t\t}, function (response) {\n\t\t\t\t\t//var response = res.status(404).send('Error message as string');\n\t\t\t\t\tconsole.log(response.statusCode); // 404\n\t\t\t\t\tconsole.log(response.responseText); // 'Error message as string'\n\t\t\t\t});\n\t\t\t} }\n\t});\n\n\texports['default'] = HomeLoginController;\n\n});","define('telegram-client/controllers/home/reset', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Controller.extend({});\n\n});","define('telegram-client/controllers/home/signup', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\tvar HomeSignupController = Ember['default'].ObjectController.extend({\n\t\tactions: {\n\n\t\t\tsignup: function signup() {\n\t\t\t\tvar username = this.get(\"username\");\n\t\t\t\tvar password = this.get(\"password\");\n\t\t\t\tvar name = this.get(\"name\");\n\t\t\t\tvar controller = this;\n\n\t\t\t\tvar newUser = this.store.createRecord(\"user\", {\n\t\t\t\t\tid: username,\n\t\t\t\t\tpassword: password,\n\t\t\t\t\tname: name,\n\t\t\t\t\toperation: \"signup\"\n\t\t\t\t});\n\t\t\t\tnewUser.save().then(function () {\n\t\t\t\t\tcontroller.transitionToRoute(\"posts\");\n\t\t\t\t}, function (response) {\n\t\t\t\t\tconsole.log(response.statusCode); // 404\n\t\t\t\t\tconsole.log(response.responseText); // 'Error message as string'\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\texports['default'] = HomeSignupController;\n\n});","define('telegram-client/initializers/app-version', ['exports', 'telegram-client/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n\n  exports['default'] = {\n    name: \"App Version\",\n    initialize: function initialize(container, application) {\n      var appName = classify(application.toString());\n      Ember['default'].libraries.register(appName, config['default'].APP.version);\n    }\n  };\n\n});","define('telegram-client/initializers/export-application-global', ['exports', 'ember', 'telegram-client/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: \"export-application-global\",\n\n    initialize: initialize\n  };\n\n});","define('telegram-client/models/post', ['exports', 'ember-data'], function (exports, DS) {\n\n    'use strict';\n\n    var Post = DS['default'].Model.extend({\n        author: DS['default'].belongsTo(\"user\", { async: true }),\n        body: DS['default'].attr(\"string\"),\n        createdDate: DS['default'].attr(\"string\", {\n            defaultValue: function defaultValue() {\n                return new Date();\n            }\n        }),\n        repostedFromAuthor: DS['default'].attr(\"string\") });\n\n    Post.reopenClass({\n        FIXTURES: [{\n            id: 1,\n            author: \"deepali\",\n            body: \"rrrrrrasfdsfds\"\n        }, {\n            id: 2,\n            author: \"prashant\",\n            body: \"shfjdsfkjdshkdsa\"\n        }, {\n            id: 3,\n            author: \"deepali\",\n            body: \"sdfdsdkkkkllkdfldsdf\"\n        }]\n    });\n\n    exports['default'] = Post;\n\n});","define('telegram-client/models/user', ['exports', 'ember-data'], function (exports, DS) {\n\n    'use strict';\n\n    var User = DS['default'].Model.extend({\n        name: DS['default'].attr(\"string\"),\n        email: DS['default'].attr(\"string\"),\n        photo: DS['default'].attr(\"string\"),\n        followedByCurrentUser: DS['default'].attr(\"boolean\", { defaultValue: false }),\n        followingCurrentUser: DS['default'].attr(\"boolean\", { defaultValue: false }) });\n\n    User.reopenClass({\n        FIXTURES: [{\n            id: \"deepali\",\n            name: \"Deepali Gandhi\" }, {\n            id: \"prashant\",\n            name: \"PG\" }, {\n            id: \"varun\",\n            name: \"Varun\" }]\n    });\n\n    exports['default'] = User;\n\n});","define('telegram-client/router', ['exports', 'ember', 'telegram-client/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {\n    this.resource(\"home\", { path: \"/\" }, function () {\n      this.route(\"login\", { path: \"/\" });\n      this.route(\"signup\", { path: \"/signup\" });\n      this.route(\"reset\", { path: \"/reset\" });\n    });\n\n    this.route(\"posts\", { path: \"/posts\" });\n\n    this.resource(\"profile\", { path: \"/profile/:user_id\" }, function () {\n      this.route(\"posts\", { path: \"/posts\" });\n      this.route(\"followers\", { path: \"/followers\" });\n      this.route(\"followers\", { path: \"/following\" });\n    });\n  });\n\n  exports['default'] = Router;\n\n});","define('telegram-client/routes/home', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('telegram-client/routes/home/login', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\tvar HomeLoginRoute = Ember['default'].Route.extend({\n\t\tmodel: function model() {\n\t\t\treturn {};\n\t\t},\n\t\trenderTemplate: function renderTemplate(controller) {\n\t\t\tthis.render(\"home.login\", { controller: controller });\n\t\t} });\n\n\texports['default'] = HomeLoginRoute;\n\n});","define('telegram-client/routes/home/reset', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\tvar HomeResetRoute = Ember['default'].Route.extend({\n\t\tmodel: function model() {\n\t\t\treturn {};\n\t\t},\n\t\trenderTemplate: function renderTemplate(controller) {\n\t\t\tthis.render(\"home.reset\", { controller: controller });\n\t\t} });\n\n\texports['default'] = HomeResetRoute;\n\n});","define('telegram-client/routes/home/signup', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\tvar HomeSignupRoute = Ember['default'].Route.extend({\n\t\tmodel: function model() {\n\t\t\treturn {};\n\t\t},\n\t\trenderTemplate: function renderTemplate(controller) {\n\t\t\tthis.render(\"home.signup\", { controller: controller });\n\t\t} });\n\n\texports['default'] = HomeSignupRoute;\n\n});","define('telegram-client/routes/posts', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\tvar PostsRoute = Ember['default'].Route.extend({\n\t\tmodel: function model() {\n\t\t\treturn this.store.find(\"post\");\n\t\t}\n\t});\n\n\texports['default'] = PostsRoute;\n\n});","define('telegram-client/routes/profile', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\tvar ProfilePostsRoute = Ember['default'].Route.extend({\n\t\tmodel: function model(params) {\n\t\t\treturn this.store.find(\"post\", { author: params.user_id });\n\t\t}\n\t});\n\n\texports['default'] = ProfilePostsRoute;\n\n});","define('telegram-client/routes/profile/followers', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\tvar ProfileFollowersRoute = Ember['default'].Route.extend({\n\t\t\tmodel: function model(params) {\n\t\t\t\t\treturn this.store.find(\"user\", { follows: params.user_id });\n\t\t\t}\n\t});\n\n\texports['default'] = ProfileFollowersRoute;\n\n});","define('telegram-client/routes/profile/following', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\tvar ProfileFollowingRoute = Ember['default'].Route.extend({\n\t\tmodel: function model(params) {\n\t\t\treturn this.store.find(\"user\", { followedBy: params.user_id });\n\t\t}\n\t});\n\n\texports['default'] = ProfileFollowingRoute;\n\n});","define('telegram-client/routes/profile/posts', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\tvar ProfilePostsRoute = Ember['default'].Route.extend({\n\t\tmodel: function model(params) {\n\t\t\treturn this.store.find(\"post\", { author: params.user_id });\n\t\t}\n\t});\n\n\texports['default'] = ProfilePostsRoute;\n\n});","define('telegram-client/serializers/user', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].RESTSerializer.extend({\n    serialize: function serialize(record, options) {\n      var data = this._super(record, options);\n\n      data.meta = {\n        operation: record.get(\"operation\"),\n        password: record.get(\"password\")\n      };\n\n      return data;\n    }\n  });\n\n});","define('telegram-client/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"section\");\n        dom.setAttribute(el1,\"id\",\"telegram\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"header\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n \\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"footer\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),2,3);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('telegram-client/templates/home', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"container\");\n        var el2 = dom.createTextNode(\"\\n\\n        \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"left\");\n        var el3 = dom.createTextNode(\"\\n              \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.setAttribute(el3,\"src\",\"/images/telegram-logo.png\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"vline\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"right\");\n        var el3 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"div\");\n        dom.setAttribute(el3,\"class\",\"postmark\");\n        var el4 = dom.createTextNode(\"\\n              \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"img\");\n        dom.setAttribute(el4,\"src\",\"/images/postmark.png\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n            \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"br\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\\n\t\t\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n          \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n  \");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 5]),4,5);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('telegram-client/templates/home/login', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"Recover password\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"Sign up\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"        \");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"form\");\n        var el2 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"fieldset\");\n        var el3 = dom.createTextNode(\"\\n                  \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        dom.setAttribute(el3,\"class\",\"p2\");\n        var el4 = dom.createTextNode(\"Get going ...\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                  Enter your username ...\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                 \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"hr\");\n        dom.setAttribute(el3,\"color\",\"#EEEEEE\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                  Enter your password ...\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                  \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"hr\");\n        dom.setAttribute(el3,\"color\",\"#EEEEEE\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                  \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"class\",\"button\");\n        dom.setAttribute(el3,\"type\",\"submit\");\n        var el4 = dom.createTextNode(\"Log in\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                  \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        dom.setAttribute(el3,\"class\",\"p1\");\n        var el4 = dom.createTextNode(\"\\n                  \t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"span\");\n        var el5 = dom.createTextNode(\" or \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n                  \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [1]);\n        var element1 = dom.childAt(element0, [1]);\n        var element2 = dom.childAt(element1, [11]);\n        var morph0 = dom.createMorphAt(element1,2,3);\n        var morph1 = dom.createMorphAt(element1,5,6);\n        var morph2 = dom.createMorphAt(element2,0,1);\n        var morph3 = dom.createMorphAt(element2,1,2);\n        element(env, element0, context, \"action\", [\"login\"], {\"on\": \"submit\"});\n        inline(env, morph0, context, \"input\", [], {\"type\": \"text\", \"placeholder\": \"Your username\", \"value\": get(env, context, \"username\")});\n        inline(env, morph1, context, \"input\", [], {\"type\": \"password\", \"placeholder\": \"Your password\", \"value\": get(env, context, \"password\")});\n        block(env, morph2, context, \"link-to\", [\"home.reset\"], {}, child0, null);\n        block(env, morph3, context, \"link-to\", [\"home.signup\"], {}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('telegram-client/templates/home/reset', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\" \");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"form\");\n        var el2 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"fieldset\");\n        var el3 = dom.createTextNode(\"\\n                  \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        dom.setAttribute(el3,\"class\",\"p2\");\n        var el4 = dom.createTextNode(\"Reset password\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                  Enter your email ...\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                 \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"hr\");\n        dom.setAttribute(el3,\"color\",\"#EEEEEE\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                  \\n                  \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"class\",\"button\");\n        dom.setAttribute(el3,\"type\",\"submit\");\n        var el4 = dom.createTextNode(\"Reset password\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                  \\n                \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\\n\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [1]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),2,3);\n        element(env, element0, context, \"action\", [\"reset\"], {\"on\": \"submit\"});\n        inline(env, morph0, context, \"input\", [], {\"type\": \"text\", \"placeholder\": \"Your email\", \"value\": get(env, context, \"email\")});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('telegram-client/templates/home/signup', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"Log in\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"form\");\n        var el2 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"fieldset\");\n        var el3 = dom.createTextNode(\"\\n                  \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        dom.setAttribute(el3,\"class\",\"p2\");\n        var el4 = dom.createTextNode(\"Get going ...\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                  Enter your name ...\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                 \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"hr\");\n        dom.setAttribute(el3,\"color\",\"#EEEEEE\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                  Enter your username ...\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                 \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"hr\");\n        dom.setAttribute(el3,\"color\",\"#EEEEEE\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                  Enter your password ...\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                  \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"hr\");\n        dom.setAttribute(el3,\"color\",\"#EEEEEE\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                  \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"button\");\n        dom.setAttribute(el3,\"class\",\"button\");\n        dom.setAttribute(el3,\"type\",\"submit\");\n        var el4 = dom.createTextNode(\"Sign up\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                  \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        dom.setAttribute(el3,\"class\",\"p1\");\n        var el4 = dom.createTextNode(\"\\n                  \t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n                  \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n            \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [1]);\n        var morph0 = dom.createMorphAt(element1,2,3);\n        var morph1 = dom.createMorphAt(element1,5,6);\n        var morph2 = dom.createMorphAt(element1,8,9);\n        var morph3 = dom.createMorphAt(dom.childAt(element1, [14]),0,1);\n        element(env, element0, context, \"action\", [\"signup\"], {\"on\": \"submit\"});\n        inline(env, morph0, context, \"input\", [], {\"type\": \"text\", \"placeholder\": \"Your name\", \"value\": get(env, context, \"name\")});\n        inline(env, morph1, context, \"input\", [], {\"type\": \"text\", \"placeholder\": \"Your username\", \"value\": get(env, context, \"username\")});\n        inline(env, morph2, context, \"input\", [], {\"type\": \"password\", \"placeholder\": \"Your password\", \"value\": get(env, context, \"password\")});\n        block(env, morph3, context, \"link-to\", [\"home.login\"], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('telegram-client/templates/home/success', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"form\");\n        var el2 = dom.createTextNode(\"\\n                \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"fieldset\");\n        var el3 = dom.createTextNode(\"\\n                  \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"p\");\n        dom.setAttribute(el3,\"class\",\"p2\");\n        var el4 = dom.createTextNode(\"Check your inbox\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n                  We've sent you a recovery password in your email inbox.\\n                \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\\n\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('telegram-client/templates/posts', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            content(env, morph0, context, \"post.author.name\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \t\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\": \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\" \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"br\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);\n          block(env, morph0, context, \"link-to\", [\"profile\", get(env, context, \"post.author\")], {}, child0, null);\n          content(env, morph1, context, \"post.body\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"Home\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"p\");\n        var el2 = dom.createTextNode(\"Latest posts :\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"br\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"br\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(element0,2,3);\n        var morph1 = dom.createMorphAt(element0,5,6);\n        var morph2 = dom.createMorphAt(fragment,1,2,contextualElement);\n        block(env, morph0, context, \"each\", [get(env, context, \"controller\")], {\"keyword\": \"post\"}, child0, null);\n        block(env, morph1, context, \"link-to\", [\"home\"], {}, child1, null);\n        content(env, morph2, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('telegram-client/templates/profile', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"Home\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createTextNode(\"Posts\");\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"p\");\n        var el2 = dom.createTextNode(\"Profile page\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,1,2,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,2,3,contextualElement);\n        var morph2 = dom.createMorphAt(fragment,3,4,contextualElement);\n        block(env, morph0, context, \"link-to\", [\"home\"], {}, child0, null);\n        block(env, morph1, context, \"link-to\", [\"posts\"], {}, child1, null);\n        content(env, morph2, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('telegram-client/templates/profile/followers', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('telegram-client/templates/profile/following', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('telegram-client/templates/profile/posts', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"p\");\n        var el2 = dom.createTextNode(\"Profile page\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,1,2,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('telegram-client/templates/todos/login', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('telegram-client/tests/adapters/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - adapters');\n  test('adapters/application.js should pass jshint', function() { \n    ok(false, 'adapters/application.js should pass jshint.\\nadapters/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nadapters/application.js: line 3, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors'); \n  });\n\n});","define('telegram-client/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(false, 'app.js should pass jshint.\\napp.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\napp.js: line 2, col 1, \\'import\\' is only available in ES6 (use esnext option).\\napp.js: line 3, col 1, \\'import\\' is only available in ES6 (use esnext option).\\napp.js: line 4, col 1, \\'import\\' is only available in ES6 (use esnext option).\\napp.js: line 16, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n5 errors'); \n  });\n\n});","define('telegram-client/tests/controllers/home/login.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers/home');\n  test('controllers/home/login.js should pass jshint', function() { \n    ok(false, 'controllers/home/login.js should pass jshint.\\ncontrollers/home/login.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\ncontrollers/home/login.js: line 32, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors'); \n  });\n\n});","define('telegram-client/tests/controllers/home/reset.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers/home');\n  test('controllers/home/reset.js should pass jshint', function() { \n    ok(false, 'controllers/home/reset.js should pass jshint.\\ncontrollers/home/reset.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\ncontrollers/home/reset.js: line 3, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors'); \n  });\n\n});","define('telegram-client/tests/controllers/home/signup.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers/home');\n  test('controllers/home/signup.js should pass jshint', function() { \n    ok(false, 'controllers/home/signup.js should pass jshint.\\ncontrollers/home/signup.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\ncontrollers/home/signup.js: line 32, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors'); \n  });\n\n});","define('telegram-client/tests/helpers/resolver', ['exports', 'ember/resolver', 'telegram-client/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('telegram-client/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('telegram-client/tests/helpers/start-app', ['exports', 'ember', 'telegram-client/app', 'telegram-client/router', 'telegram-client/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('telegram-client/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('telegram-client/tests/models/post.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/post.js should pass jshint', function() { \n    ok(false, 'models/post.js should pass jshint.\\nmodels/post.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nmodels/post.js: line 33, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors'); \n  });\n\n});","define('telegram-client/tests/models/user.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/user.js should pass jshint', function() { \n    ok(false, 'models/user.js should pass jshint.\\nmodels/user.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nmodels/user.js: line 28, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors'); \n  });\n\n});","define('telegram-client/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(false, 'router.js should pass jshint.\\nrouter.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nrouter.js: line 2, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nrouter.js: line 27, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n3 errors'); \n  });\n\n});","define('telegram-client/tests/routes/home.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/home.js should pass jshint', function() { \n    ok(false, 'routes/home.js should pass jshint.\\nroutes/home.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nroutes/home.js: line 3, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors'); \n  });\n\n});","define('telegram-client/tests/routes/home/login.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/home');\n  test('routes/home/login.js should pass jshint', function() { \n    ok(false, 'routes/home/login.js should pass jshint.\\nroutes/home/login.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nroutes/home/login.js: line 12, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors'); \n  });\n\n});","define('telegram-client/tests/routes/home/reset.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/home');\n  test('routes/home/reset.js should pass jshint', function() { \n    ok(false, 'routes/home/reset.js should pass jshint.\\nroutes/home/reset.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nroutes/home/reset.js: line 13, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors'); \n  });\n\n});","define('telegram-client/tests/routes/home/signup.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/home');\n  test('routes/home/signup.js should pass jshint', function() { \n    ok(false, 'routes/home/signup.js should pass jshint.\\nroutes/home/signup.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nroutes/home/signup.js: line 13, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors'); \n  });\n\n});","define('telegram-client/tests/routes/posts.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/posts.js should pass jshint', function() { \n    ok(false, 'routes/posts.js should pass jshint.\\nroutes/posts.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nroutes/posts.js: line 9, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors'); \n  });\n\n});","define('telegram-client/tests/routes/profile.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/profile.js should pass jshint', function() { \n    ok(false, 'routes/profile.js should pass jshint.\\nroutes/profile.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nroutes/profile.js: line 9, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors'); \n  });\n\n});","define('telegram-client/tests/routes/profile/followers.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/profile');\n  test('routes/profile/followers.js should pass jshint', function() { \n    ok(false, 'routes/profile/followers.js should pass jshint.\\nroutes/profile/followers.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nroutes/profile/followers.js: line 10, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors'); \n  });\n\n});","define('telegram-client/tests/routes/profile/following.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/profile');\n  test('routes/profile/following.js should pass jshint', function() { \n    ok(false, 'routes/profile/following.js should pass jshint.\\nroutes/profile/following.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nroutes/profile/following.js: line 10, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors'); \n  });\n\n});","define('telegram-client/tests/routes/profile/posts.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/profile');\n  test('routes/profile/posts.js should pass jshint', function() { \n    ok(false, 'routes/profile/posts.js should pass jshint.\\nroutes/profile/posts.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nroutes/profile/posts.js: line 9, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors'); \n  });\n\n});","define('telegram-client/tests/serializers/user.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - serializers');\n  test('serializers/user.js should pass jshint', function() { \n    ok(false, 'serializers/user.js should pass jshint.\\nserializers/user.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nserializers/user.js: line 3, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors'); \n  });\n\n});","define('telegram-client/tests/test-helper', ['telegram-client/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('telegram-client/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('telegram-client/tests/unit/adapters/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"adapter:application\", \"ApplicationAdapter\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['serializer:foo']\n\n});","define('telegram-client/tests/unit/adapters/application-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/adapters');\n  test('unit/adapters/application-test.js should pass jshint', function() { \n    ok(true, 'unit/adapters/application-test.js should pass jshint.'); \n  });\n\n});","define('telegram-client/tests/unit/controllers/home/login-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:home/login\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('telegram-client/tests/unit/controllers/home/login-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers/home');\n  test('unit/controllers/home/login-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/home/login-test.js should pass jshint.'); \n  });\n\n});","define('telegram-client/tests/unit/controllers/home/reset-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:home/reset\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('telegram-client/tests/unit/controllers/home/reset-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers/home');\n  test('unit/controllers/home/reset-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/home/reset-test.js should pass jshint.'); \n  });\n\n});","define('telegram-client/tests/unit/controllers/home/signup-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:home/signup\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('telegram-client/tests/unit/controllers/home/signup-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers/home');\n  test('unit/controllers/home/signup-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/home/signup-test.js should pass jshint.'); \n  });\n\n});","define('telegram-client/tests/unit/models/post-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel(\"post\", {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test(\"it exists\", function (assert) {\n    var model = this.subject();\n    // var store = this.store();\n    assert.ok(!!model);\n  });\n\n});","define('telegram-client/tests/unit/models/post-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/post-test.js should pass jshint', function() { \n    ok(true, 'unit/models/post-test.js should pass jshint.'); \n  });\n\n});","define('telegram-client/tests/unit/models/user-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel(\"user\", {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test(\"it exists\", function (assert) {\n    var model = this.subject();\n    // var store = this.store();\n    assert.ok(!!model);\n  });\n\n});","define('telegram-client/tests/unit/models/user-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/user-test.js should pass jshint', function() { \n    ok(true, 'unit/models/user-test.js should pass jshint.'); \n  });\n\n});","define('telegram-client/tests/unit/routes/home/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:home/index\", {});\n\n  ember_qunit.test(\"it exists\", function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('telegram-client/tests/unit/routes/home/index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes/home');\n  test('unit/routes/home/index-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/home/index-test.js should pass jshint.'); \n  });\n\n});","define('telegram-client/tests/unit/routes/home/login-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:home/login\", {});\n\n  ember_qunit.test(\"it exists\", function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('telegram-client/tests/unit/routes/home/login-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes/home');\n  test('unit/routes/home/login-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/home/login-test.js should pass jshint.'); \n  });\n\n});","define('telegram-client/tests/unit/routes/profile/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:profile/index\", {});\n\n  ember_qunit.test(\"it exists\", function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('telegram-client/tests/unit/routes/profile/index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes/profile');\n  test('unit/routes/profile/index-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/profile/index-test.js should pass jshint.'); \n  });\n\n});","define('telegram-client/tests/unit/routes/profile/posts-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:profile/posts\", {});\n\n  ember_qunit.test(\"it exists\", function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('telegram-client/tests/unit/routes/profile/posts-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes/profile');\n  test('unit/routes/profile/posts-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/profile/posts-test.js should pass jshint.'); \n  });\n\n});","define('telegram-client/tests/unit/serializers/user-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"serializer:user\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function (assert) {\n    var serializer = this.subject();\n    assert.ok(serializer);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['serializer:foo']\n\n});","define('telegram-client/tests/unit/serializers/user-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/serializers');\n  test('unit/serializers/user-test.js should pass jshint', function() { \n    ok(true, 'unit/serializers/user-test.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('telegram-client/config/environment', ['ember'], function(Ember) {\n  var prefix = 'telegram-client';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"telegram-client/tests/test-helper\");\n} else {\n  require(\"telegram-client/app\")[\"default\"].create({\"name\":\"telegram-client\",\"version\":\"0.0.0.80712ca9\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"telegram-client.js"}